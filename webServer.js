const express = require('express');
const path = require('path');
const fs = require('fs');
const os = require('os');

// Google Services „Åæ„Åü„ÅØ SQLite „ÅÆËá™ÂãïÈÅ∏Êäû
let dataService;
let getImageStats;

if (fs.existsSync('config.json')) {
  const GoogleDataService = require('./googleDataService');
  dataService = new GoogleDataService();
  console.log('üîµ Google Drive/Sheets „É¢„Éº„Éâ„ÅßËµ∑Âãï„Åó„Åæ„Åô');
  getImageStats = () => ({ totalFiles: 0, totalSize: 0, memberStats: {} }); // GoogleÁî®„ÅØÂà•ÈÄîÂÆüË£Ö
} else {
  const BlogDatabase = require('./database');
  const { IMAGE_DIR, getImageStats: localGetImageStats } = require('./imageDownloader');
  dataService = new BlogDatabase();
  getImageStats = localGetImageStats;
  console.log('üü° SQLite „É¢„Éº„Éâ„ÅßËµ∑Âãï„Åó„Åæ„Åô');
}

const app = express();
const PORT = 3000;

// ÈùôÁöÑ„Éï„Ç°„Ç§„É´„ÅÆÈÖç‰ø°
if (fs.existsSync('config.json')) {
  // Google Drive „É¢„Éº„Éâ„Åß„ÅØÈùôÁöÑ„Éï„Ç°„Ç§„É´ÈÖç‰ø°„ÅØ‰∏çË¶Å
} else {
  const { IMAGE_DIR } = require('./imageDownloader');
  app.use('/images', express.static(IMAGE_DIR));
}
app.use(express.static('public'));
app.use(express.json()); // JSON„Éë„É©„É°„Éº„Çø„ÅÆ„Éë„Éº„Çπ

// EJS„ÉÜ„É≥„Éó„É¨„Éº„Éà„Ç®„É≥„Ç∏„É≥„ÅÆË®≠ÂÆö
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Êó•‰ªòËß£ÊûêÈñ¢Êï∞
function parsePostDate(dateStr) {
  if (!dateStr) return new Date('1970-01-01');

  // „Çπ„É©„ÉÉ„Ç∑„É•Âå∫Âàá„Çä„ÅÆÊó•‰ªòÂΩ¢Âºè (YYYY/MM/DD)
  if (dateStr.includes('/')) {
    const parts = dateStr.split('/');
    if (parts.length === 3) {
      const year = parseInt(parts[0]);
      const month = parseInt(parts[1]) - 1; // Êúà„ÅØ0„Éô„Éº„Çπ
      const day = parseInt(parts[2]);
      return new Date(year, month, day);
    }
  }

  // „Éè„Ç§„Éï„É≥Âå∫Âàá„Çä„ÅÆÊó•‰ªòÂΩ¢Âºè (YYYY-MM-DD)
  if (dateStr.includes('-')) {
    const parts = dateStr.split('-');
    if (parts.length === 3) {
      const year = parseInt(parts[0]);
      const month = parseInt(parts[1]) - 1; // Êúà„ÅØ0„Éô„Éº„Çπ
      const day = parseInt(parts[2]);
      return new Date(year, month, day);
    }
  }

  // Êï∞Â≠ó„ÅÆ„Åø„ÅÆÂ†¥ÂêàÔºàÊó•‰ªò„ÅÆ„ÅøÔºâ„ÄÅÁèæÂú®„ÅÆÂπ¥Êúà„Å®„Åó„Å¶Ëß£Èáà
  if (/^\d+$/.test(dateStr)) {
    const day = parseInt(dateStr);
    if (day >= 1 && day <= 31) {
      const now = new Date();
      return new Date(now.getFullYear(), now.getMonth(), day);
    }
  }

  // „Åù„ÅÆ‰ªñ„ÅÆÂΩ¢Âºè„ÅÆÂ†¥Âêà„ÄÅDate.parse„ÅßË©¶„Åø„Çã
  const parsed = new Date(dateStr);
  return isNaN(parsed.getTime()) ? new Date('1970-01-01') : parsed;
}

// È´òÂ∫¶„Å™Ê§úÁ¥¢Èñ¢Êï∞
async function performAdvancedSearch(options) {
  const { keyword, titleSearch, memberId, members, limit, dateFrom, dateTo, sortOrder, dataService } = options;

  try {
    // Âü∫Êú¨ÁöÑ„Å™Ê§úÁ¥¢„Åã„ÇâÈñãÂßã
    let posts = [];

    if (keyword) {
      posts = await dataService.searchBlogPosts(keyword);
    } else {
      // „Ç≠„Éº„ÉØ„Éº„Éâ„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂÖ®Ë®ò‰∫ãÂèñÂæó
      posts = await dataService.getBlogPosts(null, 10000);
    }

    // „Çø„Ç§„Éà„É´Ê§úÁ¥¢„Åß„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    if (titleSearch) {
      posts = posts.filter(post =>
        post.title && post.title.toLowerCase().includes(titleSearch.toLowerCase())
      );
    }

    // „É°„É≥„Éê„Éº„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    if (memberId) {
      posts = posts.filter(post => post.member_id == memberId);
    } else if (Array.isArray(members) && members.length > 0) {
      posts = posts.filter(post => members.includes(post.member_id.toString()));
    }

    // Êó•‰ªòÁØÑÂõ≤„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    if (dateFrom || dateTo) {
      posts = posts.filter(post => {
        if (!post.date) return false;

        const postDate = new Date(post.date);
        let isInRange = true;

        if (dateFrom) {
          const fromDate = new Date(dateFrom);
          if (postDate < fromDate) isInRange = false;
        }

        if (dateTo) {
          const toDate = new Date(dateTo);
          toDate.setHours(23, 59, 59, 999); // ÁµÇÊó•„Åæ„ÅßÂê´„ÇÅ„Çã
          if (postDate > toDate) isInRange = false;
        }

        return isInRange;
      });
    }

    // Êó•‰ªò„Å´„Çà„Çã„ÇΩ„Éº„Éà
    if (sortOrder === 'asc') {
      posts.sort((a, b) => {
        const dateA = parsePostDate(a.date);
        const dateB = parsePostDate(b.date);
        return dateA - dateB;
      });
    } else {
      posts.sort((a, b) => {
        const dateA = parsePostDate(a.date);
        const dateB = parsePostDate(b.date);
        return dateB - dateA;
      });
    }

    // „É™„Éü„ÉÉ„ÉàÈÅ©Áî®
    return posts.slice(0, limit);

  } catch (error) {
    console.error('È´òÂ∫¶„Å™Ê§úÁ¥¢„Ç®„É©„Éº:', error);
    return [];
  }
}

// Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÈñ¢Êï∞
function formatDate(dateStr) {
  if (!dateStr) return '';

  // Êó¢„Å´Ê≠£„Åó„ÅÑÂΩ¢Âºè„ÅÆÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„ÅæËøî„Åô
  if (dateStr.match(/\d{4}\/\d{1,2}\/\d{1,2}/)) {
    return dateStr;
  }

  // Êï∞Â≠ó„ÅÆ„Åø„ÅÆÂ†¥Âêà„ÅÆÂá¶ÁêÜ
  if (dateStr.match(/^\d+$/)) {
    const num = parseInt(dateStr);
    if (num >= 1 && num <= 31) {
      const now = new Date();
      return `${now.getFullYear()}/${String(now.getMonth() + 1).padStart(2, '0')}/${String(num).padStart(2, '0')}`;
    }
  }

  // Âπ¥ÊúàÊó•„Éë„Çø„Éº„É≥„ÇíYYYY/MM/DDÂΩ¢Âºè„Å´Áµ±‰∏Ä
  return dateStr.replace(/(\d{4})[Âπ¥\-\.](\d{1,2})[Êúà\-\.](\d{1,2})[Êó•]?/, '$1/$2/$3');
}

// „Éõ„Éº„É†„Éö„Éº„Ç∏ - Ê§úÁ¥¢ÁîªÈù¢
app.get('/', async (req, res) => {
  try {
    const keyword = req.query.q || '';
    const titleSearch = req.query.title_search || '';
    const memberId = req.query.member || null;
    const members = req.query.members || [];
    const perPage = parseInt(req.query.per_page) || 20;
    const page = parseInt(req.query.page) || 1;
    const dateFrom = req.query.date_from || '';
    const dateTo = req.query.date_to || '';
    const sortOrder = req.query.sort || 'desc';

    // ÂÖ®‰ª∂ÂèñÂæó„Åó„Å¶„Åã„Çâ„Éö„Éº„Ç∏„É≥„Ç∞Âá¶ÁêÜ
    let allPosts = await performAdvancedSearch({
      keyword,
      titleSearch,
      memberId,
      members,
      limit: 10000, // ÂÖ®‰ª∂ÂèñÂæó
      dateFrom,
      dateTo,
      sortOrder,
      dataService
    });

    // „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Ë®àÁÆó
    const totalPosts = allPosts.length;
    const totalPages = Math.ceil(totalPosts / perPage);
    const offset = (page - 1) * perPage;
    const posts = allPosts.slice(offset, offset + perPage);

    // Êó•‰ªò„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    const formattedPosts = posts.map(post => ({
      ...post,
      date: formatDate(post.date)
    }));

    const allMembers = await dataService.getMembers();
    const stats = fs.existsSync('config.json') ?
      await dataService.getStats() : getImageStats();

    // Get unique author count from database
    let uniqueAuthors = 0;
    if (!fs.existsSync('config.json')) {
      try {
        const result = await new Promise((resolve, reject) => {
          dataService.db.get(
            'SELECT COUNT(DISTINCT member_name) as count FROM blog_posts',
            (err, row) => {
              if (err) reject(err);
              else resolve(row);
            }
          );
        });
        uniqueAuthors = result.count;
      } catch (err) {
        console.error('Error getting unique authors:', err);
      }
    }
    stats.uniqueAuthors = uniqueAuthors;

    res.render('index', {
      keyword,
      posts: formattedPosts,
      members: allMembers,
      stats,
      title: 'Ê´ªÂùÇ46 „Éñ„É≠„Ç∞„Ç¢„Éº„Ç´„Ç§„Éñ',
      req: req,
      pagination: {
        page,
        perPage,
        totalPages,
        totalPosts,
        hasNext: page < totalPages,
        hasPrev: page > 1
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).send('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
  }
});

// „É°„É≥„Éê„Éº‰∏ÄË¶ß„Éö„Éº„Ç∏
app.get('/members', async (req, res) => {
  try {
    const members = await dataService.getMembers();
    const stats = fs.existsSync('config.json') ?
      await dataService.getStats() : getImageStats();

    res.render('members', {
      members,
      stats,
      title: '„É°„É≥„Éê„Éº‰∏ÄË¶ß'
    });
  } catch (error) {
    console.error(error);
    res.status(500).send('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
  }
});

// „É°„É≥„Éê„ÉºÂà•„Éñ„É≠„Ç∞‰∏ÄË¶ß
app.get('/member/:id', async (req, res) => {
  try {
    const memberId = req.params.id;
    const members = await dataService.getMembers();
    const member = members.find(m => m.id == memberId);

    if (!member) {
      res.status(404).send('„É°„É≥„Éê„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      return;
    }

    let posts = await dataService.getBlogPosts(memberId, 100);

    // Êó•‰ªò„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    posts = posts.map(post => ({
      ...post,
      date: formatDate(post.date)
    }));

    res.render('member', {
      member,
      posts,
      title: `${member.name} - „Éñ„É≠„Ç∞‰∏ÄË¶ß`
    });
  } catch (error) {
    console.error(error);
    res.status(500).send('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
  }
});

// „Éñ„É≠„Ç∞Ë®ò‰∫ãË©≥Á¥∞
app.get('/post/:id', async (req, res) => {
  try {
    const postId = req.params.id;

    // ÁîªÂÉèËæº„Åø„ÅßÂçò‰∏ÄÊäïÁ®ø„ÇíÂèñÂæó
    let post;
    if (fs.existsSync('config.json')) {
      // Google SheetsÂØæÂøú„ÅÆË®ò‰∫ãÂèñÂæó
      const allPosts = await dataService.getBlogPosts(null, 10000);
      post = allPosts.find(p => p.id == postId);
    } else {
      // SQLite„Åã„ÇâÁîªÂÉèËæº„Åø„ÅßÂèñÂæó
      post = await dataService.getBlogPost(postId);
    }

    if (!post) {
      res.status(404).send('Ë®ò‰∫ã„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      return;
    }

    // Êó•‰ªò„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    post = {
      ...post,
      date: formatDate(post.date)
    };

    res.render('post', {
      post,
      title: post.title || '„Éñ„É≠„Ç∞Ë®ò‰∫ã'
    });
  } catch (error) {
    console.error(error);
    res.status(500).send('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
  }
});

// ÊäïÁ®øÂâäÈô§
app.delete('/api/post/:id', async (req, res) => {
  try {
    const postId = req.params.id;
    const result = await dataService.deleteBlogPost(postId);

    if (result > 0) {
      res.json({ success: true, message: 'ÊäïÁ®ø„ÅåÂâäÈô§„Åï„Çå„Åæ„Åó„Åü' });
    } else {
      res.status(404).json({ success: false, message: 'ÊäïÁ®ø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì' });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü' });
  }
});

// ‰∏ÄÊã¨ÊäïÁ®øÂâäÈô§
app.delete('/api/posts/bulk-delete', async (req, res) => {
  try {
    const { postIds } = req.body;

    if (!postIds || !Array.isArray(postIds) || postIds.length === 0) {
      res.status(400).json({ success: false, message: 'ÂâäÈô§„Åô„ÇãÊäïÁ®øID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' });
      return;
    }

    console.log(`‰∏ÄÊã¨ÂâäÈô§ÈñãÂßã: ${postIds.length}‰ª∂„ÅÆÊäïÁ®ø`);

    let deletedCount = 0;
    const errors = [];

    for (const postId of postIds) {
      try {
        const result = await dataService.deleteBlogPost(postId);
        if (result > 0) {
          deletedCount++;
        }
      } catch (error) {
        errors.push(`Post ${postId}: ${error.message}`);
      }
    }

    if (deletedCount > 0) {
      console.log(`‰∏ÄÊã¨ÂâäÈô§ÂÆå‰∫Ü: ${deletedCount}‰ª∂ÂâäÈô§`);
      res.json({
        success: true,
        message: `${deletedCount}‰ª∂„ÅÆÊäïÁ®ø„ÅåÂâäÈô§„Åï„Çå„Åæ„Åó„Åü`,
        deletedCount,
        errors: errors.length > 0 ? errors : undefined
      });
    } else {
      res.status(404).json({ success: false, message: 'ÂâäÈô§„Åß„Åç„ÇãÊäïÁ®ø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü' });
    }
  } catch (error) {
    console.error('‰∏ÄÊã¨ÂâäÈô§„Ç®„É©„Éº:', error);
    res.status(500).json({ success: false, message: '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü' });
  }
});

// Ê§úÁ¥¢
app.get('/search', async (req, res) => {
  try {
    const keyword = req.query.q || '';

    if (keyword) {
      const posts = await dataService.searchBlogPosts(keyword);
      res.render('search', {
        keyword,
        posts,
        title: `„Äå${keyword}„Äç„ÅÆÊ§úÁ¥¢ÁµêÊûú`
      });
    } else {
      res.render('search', {
        keyword: '',
        posts: [],
        title: 'Ê§úÁ¥¢'
      });
    }
  } catch (error) {
    console.error(error);
    res.status(500).send('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
  }
});

// „É≠„Éº„Ç´„É´IP„Ç¢„Éâ„É¨„Çπ„ÇíÂèñÂæó
function getLocalIPAddress() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      // IPv4„Åß„ÄÅÂÜÖÈÉ®„Ç¢„Éâ„É¨„Çπ„Åß„Å™„ÅÑ„ÇÇ„ÅÆ„ÇíÊé¢„Åô
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }
  return 'localhost';
}

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
function startServer() {
  const localIP = getLocalIPAddress();
  const server = app.listen(PORT, '0.0.0.0', () => {
    console.log(`\n‚ú® Web„Çµ„Éº„Éê„Éº„ÅåËµ∑Âãï„Åó„Åæ„Åó„Åü`);
    console.log(`üåê PC„ÅßÈñã„Åè: http://localhost:${PORT}`);
    if (localIP !== 'localhost') {
      console.log(`üì± „Çπ„Éû„Éõ„ÅßÈñã„Åè: http://${localIP}:${PORT}`);
      console.log(`‚ö†Ô∏è  Âêå„ÅòWi-Fi„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂÜÖ„Åã„Çâ„ÅÆ„Åø„Ç¢„ÇØ„Çª„Çπ„Åó„Å¶„Åè„Å†„Åï„ÅÑ`);
    }
    console.log(`üìä „Çµ„Éº„Éê„Éº„ÅØËá™ÂãïÁöÑ„Å´„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂÆüË°å„Åï„Çå„Åæ„Åô\n`);
  });

  // „Éó„É≠„Çª„ÇπÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  process.on('SIGINT', () => {
    console.log('\nüõë Web„Çµ„Éº„Éê„Éº„ÇíÂÅúÊ≠¢„Åó„Åæ„Åô...');
    server.close(() => {
      dataService.close();
      process.exit(0);
    });
  });

  return server;
}

// „Ç®„ÇØ„Çπ„Éù„Éº„Éà
module.exports = { startServer };

// Áõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà
if (require.main === module) {
  startServer();
}